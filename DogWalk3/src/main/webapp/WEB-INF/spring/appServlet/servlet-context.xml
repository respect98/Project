<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-3.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/css/" />
	<resources mapping="/images/**" location="/images/" />
	<resources mapping="/js/**" location="/js/" />
	<resources mapping="/**" location="/" /><!--모든 폴더-->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.family.web,com.family,com.member,com.message" />
	<context:component-scan base-package="com.common,com.family.pet,com.mongo.db,com.obj.test,com.family.qna"/>
	
	 <!-- <mvc:resources mapping="/**" location="/static/" /> -->
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="UTF-8"/>
		<beans:property name="maxUploadSize" value="-1"/>
		<!-- -1로 주면 무제한 업로드 가능 -->
	</beans:bean>
	<beans:bean id="upDir" class="java.lang.String">
		<beans:constructor-arg value="c:/myjava/Upload"/>
	</beans:bean>
	<!-- 웹 소켓핸들러 -->
				<websocket:handlers >
					<websocket:mapping path="/chat" handler="chatHandler" />
					<websocket:handshake-interceptors>
						<beans:bean class="com.message.interceptor.ChatHandShakeInterceptor" />												
					</websocket:handshake-interceptors>
					<websocket:sockjs websocket-enabled="true"/>
				</websocket:handlers>
			        <websocket:handlers>
               <websocket:mapping handler="alarmHandler" path="/alarm"/>
               <!-- WebSocket Handshake : 웹소켓 핸들러 클래스(echoHandler)가 호출되기전에 HttpSession에 접속하여  -->
               <!-- '이용자 아이디를 추출하는 기능' 등을 인터셉터가 수행하도록 설정 -->
               <websocket:handshake-interceptors>
                       <beans:bean class="com.message.interceptor.AlarmHandShakeInterceptor"/>
               </websocket:handshake-interceptors>
               <websocket:sockjs websocket-enabled="true"/>
               <!-- <websocket:sockjs /> -->
        </websocket:handlers>
        <beans:bean id="alarmHandler" class="com.message.websocket.WebSocketAlarmHandler" />
		<beans:bean id="chatHandler" class="com.message.websocket.WebSocketChatHandler" />
		
		
		<!-- 하현수 0111  -->
		<!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
		<beans:bean id="naverLoginBO" class="com.member.controller.NaverLoginBO" />
		
		
	
	    <!-- 하현수 0111 끝 -->
	    <!-- mongo setting=============  -->
	
	<!-- [1] MongoClient빈 등록 -->
	<mongo:mongo-client id="mongoClient" host="localhost" port="27017"/>
	<!-- [2] MongoDbFactory빈 등록 -->
	<mongo:db-factory id="mongoDbFactory" dbname="동물병원현황" mongo-client-ref="mongoClient"/>
	<!-- [3] Mongodb_class 필드를 저장하지 않기 위한 설정 -->
	<beans:bean id="mappingContext" class="org.springframework.data.mongodb.core.mapping.MongoMappingContext"/>
	
	<beans:bean id="defaultMongoTypeMapper" class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">
		<beans:constructor-arg name="typeKey">
			<beans:null/>
		</beans:constructor-arg>
	</beans:bean>
	<beans:bean id="mappingMongoConverter" class="org.springframework.data.mongodb.core.convert.MappingMongoConverter">
		<beans:constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
		<beans:constructor-arg name="mappingContext" ref="mappingContext"/>
		<beans:property name="typeMapper" ref="defaultMongoTypeMapper"/>
	</beans:bean>
	<!-- [4] MongoTemplate빈 등록 -->
	<beans:bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<beans:constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
		<beans:constructor-arg name="mongoConverter" ref="mappingMongoConverter"/>
	</beans:bean>
	
	<!-- [5] @Repository가 붙은 클래스에서 발생되는 MongoException을 해석할 PostProcessor정의 -->
	<beans:bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
	
</beans:beans>
